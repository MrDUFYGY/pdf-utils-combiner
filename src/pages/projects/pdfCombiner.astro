---
import Layout from '../../layout/layout.astro';

const title = 'Subir Archivos';
---
<Layout title={title}>
  <!-- Sección de Subida de Archivos -->
  <div class="text-center mx-auto p-20 w-10/12 max-w-[80%] bg-gray-900 rounded-lg">
    <h1 class="text-2xl font-bold">Subir Archivos</h1>
    <p class="text-gray-400 mt-4">Selecciona hasta 50 archivos para combinarlos en un solo documento PDF.</p>

    <form id="uploadForm" class="mt-6">
      <div class="flex-1 items-center max-w-screen-sm mx-auto mb-3 space-y-4 sm:flex sm:space-y-0">
        <div class="relative w-full">
          <div class="items-center justify-center max-w-xl mx-auto">
            <label
              class="flex justify-center w-full h-32 px-4 transition bg-gray-800 border-2 border-gray-400 border-dashed rounded-md appearance-none cursor-pointer hover:border-gray-100 focus:outline-none"
              id="drop"
            >
              <span class="flex items-center space-x-2">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  class="w-6 h-6 text-gray-600"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                  stroke-width="2"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"
                  ></path>
                </svg>
                <span class="font-medium text-gray-600">
                  Suelta los documentos, o
                  <span class="text-blue-600 underline ml-[4px]">buscalos</span>
                </span>
              </span>
              <input multiple type="file" name="files" class="hidden" accept=".pdf" id="fileInput">
            </label>
          </div>
        </div>
      </div>



      <button type="submit" class="mt-4 bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">
        Subir y Combinar Archivos
      </button>

        <!-- Lista dinámica de archivos -->
        <div id="fileList" class="mt-4 text-left bg-gray-800 p-4 rounded-md text-gray-200">
          <h2 class="text-lg font-semibold mb-2">Archivos Seleccionados:</h2>
          <ul class="list-decimal ml-5 space-y-1">
            <!-- Archivos serán añadidos dinámicamente aquí -->
          </ul>
        </div>
      
    </form>
  </div>
</Layout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const dropArea = document.getElementById('drop') as HTMLElement | null;
    const fileInput = document.getElementById('fileInput') as HTMLInputElement | null;
    const fileList = document.getElementById('fileList') as HTMLElement | null;
    const fileListUl = fileList?.querySelector('ul');

    if (!dropArea || !fileInput || !fileList || !fileListUl) {
      console.error('Elementos requeridos no encontrados.');
      return;
    }

    // Función para actualizar la lista de archivos
    function updateFileList(files: FileList): void {
      if (!fileListUl) return;
      fileListUl.innerHTML = ''; // Limpiar la lista
      Array.from(files).forEach((file, index) => {
        const li = document.createElement('li');
        li.textContent = ` - ${file.name}`;
        fileListUl.appendChild(li);
      });
    }

    // Manejar evento de cambio en el input
    fileInput.addEventListener('change', () => {
      if (fileInput.files) {
        updateFileList(fileInput.files);
      }
    });

    // Manejar archivos soltados
    dropArea.addEventListener('drop', (e) => {
      e.preventDefault();
      e.stopPropagation();

      if (!e.dataTransfer || !e.dataTransfer.files) {
        console.error('No se pudieron obtener los archivos.');
        return;
      }

      const files = e.dataTransfer.files;
      fileInput.files = files; // Asignar los archivos al input para procesarlos
      updateFileList(files); // Actualizar la lista de archivos
    });

    // Prevenir comportamientos por defecto en eventos de arrastre
    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach((eventName) => {
      dropArea.addEventListener(eventName, (e) => {
        e.preventDefault();
        e.stopPropagation();
      });
    });

    // Añadir y quitar clase visual durante el arrastre
    ['dragenter', 'dragover'].forEach((eventName) => {
      dropArea.addEventListener(eventName, () => dropArea.classList.add('border-blue-500'));
    });
    ['dragleave', 'drop'].forEach((eventName) => {
      dropArea.addEventListener(eventName, () => dropArea.classList.remove('border-blue-500'));
    });
  });

  // Definición de función para subir archivos
  async function uploadFiles(files: FileList): Promise<void> {
    const formData = new FormData();
    for (const file of Array.from(files)) {
      formData.append('files', file);
    }

    try {
      const response = await fetch(`https://api-pdf-combiner-production.up.railway.app/api/upload`, {
        method: 'POST',
        body: formData,
        credentials: 'include', // Incluye cookies
      });

      if (response.ok) {
        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'combined.pdf';
        a.click();
        window.URL.revokeObjectURL(url);
      } else {
        alert('Error al combinar los archivos.');
      }
    } catch (error) {
      console.error('Error al subir los archivos:', error);
      alert('Error al conectar con el servidor.');
    }
  }

  // Manejador de envío del formulario
  document.getElementById('uploadForm')?.addEventListener('submit', (event) => {
    event.preventDefault();
    const fileInput = document.getElementById('fileInput') as HTMLInputElement | null;

    if (!fileInput || !fileInput.files || fileInput.files.length < 2) {
      alert('Por favor, selecciona al menos 2 archivos PDF.');
      return;
    }

    uploadFiles(fileInput.files);
  });
</script>